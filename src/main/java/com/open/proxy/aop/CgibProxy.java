package com.open.proxy.aop;import java.lang.reflect.Method;import net.sf.cglib.proxy.Enhancer;import net.sf.cglib.proxy.MethodInterceptor;import net.sf.cglib.proxy.MethodProxy;import com.google.common.base.Preconditions;import com.open.proxy.aop.advisor.Advisor;import com.open.proxy.aop.invocation.CglibMethodInvocation;import com.open.proxy.aop.pointcut.MethodMatcher;import com.open.proxy.aop.pointcut.PointCut;/** * @author jinming.wu * @date 2014-4-7 */public class CgibProxy extends AbstractProxy implements MethodInterceptor {    public CgibProxy(TargetSource targetSource, Advisor advisor) {        super(targetSource, advisor);    }    @Override    public Object getProxy() {        Enhancer enhancer = new Enhancer();        enhancer.setSuperclass(targetSource.getTargetClazz());        enhancer.setInterfaces(targetSource.getInterfaces());        enhancer.setCallback(this);        Object enhanced = enhancer.create();        return enhanced;    }    @Override    public Object intercept(Object obj, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {        Preconditions.checkNotNull(targetSource);        Preconditions.checkNotNull(advisor);        com.open.proxy.aop.advice.MethodInterceptor methodInterceptor = (com.open.proxy.aop.advice.MethodInterceptor) advisor.getAdvice();        PointCut pointCut = advisor.getPointCut();        MethodMatcher methodMatcher = pointCut.getMethodMatcher();        if (methodMatcher != null && methodMatcher.matches(method, targetSource.getTargetClazz())) {            return methodInterceptor.invoke(new CglibMethodInvocation(targetSource.getTarget(), method, args,                                                                      methodProxy));        } else {            return methodProxy.invoke(targetSource.getTarget(), args);        }    }}