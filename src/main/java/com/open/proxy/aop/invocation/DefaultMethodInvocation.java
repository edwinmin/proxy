package com.open.proxy.aop.invocation;import java.lang.reflect.AccessibleObject;import java.lang.reflect.Method;import org.aopalliance.intercept.MethodInvocation;/** * 静态方法代理 *  * @author jinming.wu * @date 2014-4-7 */public class DefaultMethodInvocation implements MethodInvocation {    private Method   method;    private Object   target;    private Object[] args;    public DefaultMethodInvocation(Object target, Method method, Object[] args) {        this.method = method;        this.args = args;        this.target = target;    }    @Override    public Object[] getArguments() {        return args;    }    @Override    public Object proceed() throws Throwable {        return method.invoke(target, args);    }    @Override    public Object getThis() {        return target;    }    @Override    public AccessibleObject getStaticPart() {        return method;    }    @Override    public Method getMethod() {        return method;    }}