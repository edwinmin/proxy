package com.open.proxy.aop;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;import org.aopalliance.intercept.MethodInterceptor;import com.google.common.base.Preconditions;import com.open.proxy.aop.advisor.Advisor;import com.open.proxy.aop.invocation.DefaultMethodInvocation;import com.open.proxy.aop.pointcut.MethodMatcher;import com.open.proxy.aop.pointcut.PointCut;/** * Jdk动态代理 *  * @author jinming.wu * @date 2014-4-7 */public class JdkProxy extends AbstractProxy implements InvocationHandler {    public JdkProxy(TargetSource targetSource, Advisor advisor) {        super(targetSource, advisor);    }    @Override    public Object getProxy() {        return Proxy.newProxyInstance(targetSource.getTargetClazz().getClassLoader(), targetSource.getInterfaces(),                                      this);    }    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {        Preconditions.checkNotNull(targetSource);        Preconditions.checkNotNull(advisor);        MethodInterceptor methodInterceptor = (MethodInterceptor) advisor.getAdvice();        PointCut pointCut = advisor.getPointCut();        MethodMatcher methodMatcher = pointCut.getMethodMatcher();        if (methodMatcher != null && methodMatcher.matches(method, targetSource.getTargetClazz())) {            return methodInterceptor.invoke(new DefaultMethodInvocation(targetSource.getTarget(), method, args));        } else {            return method.invoke(targetSource.getTarget(), args);        }    }}